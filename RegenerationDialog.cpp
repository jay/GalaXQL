/////////////////////////////////////////////////////////////////////////////
// Name:        RegenerationDialog.cpp
// Author:      Jari Komppa
// Licence:     
//
// Copyright (c) 2005, Jari Komppa
// All rights reserved.
// 
// Redistribution and use in source and binary forms, 
// with or without modification, are permitted provided 
// that the following conditions are met:
//
// - Redistributions of source code must retain the above 
//   copyright notice, this list of conditions and the 
//   following disclaimer.
// - Redistributions in binary form must reproduce the above 
//   copyright notice, this list of conditions and the 
//   following disclaimer in the documentation and/or other 
//   materials provided with the distribution.
// - The authors' names may not be used to endorse or promote 
//   products derived from this software without specific 
//   prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY 
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
// POSSIBILITY OF SUCH DAMAGE.
//
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), 11/06/05 21:14:43

#if defined(__GNUG__) && !defined(__APPLE__)
#pragma implementation "RegenerationDialog.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "RegenerationDialog.h"

////@begin XPM images

////@end XPM images

/*!
 * RegenerationDialog type definition
 */

IMPLEMENT_DYNAMIC_CLASS( RegenerationDialog, wxDialog )

/*!
 * RegenerationDialog event table definition
 */

BEGIN_EVENT_TABLE( RegenerationDialog, wxDialog )

////@begin RegenerationDialog event table entries
////@end RegenerationDialog event table entries

END_EVENT_TABLE()

/*!
 * RegenerationDialog constructors
 */

RegenerationDialog::RegenerationDialog( )
{
}

RegenerationDialog::RegenerationDialog( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}

/*!
 * RegenerationDialog creator
 */

bool RegenerationDialog::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin RegenerationDialog member initialisation
    mProgress = NULL;
////@end RegenerationDialog member initialisation

////@begin RegenerationDialog creation
    SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();
////@end RegenerationDialog creation
    return TRUE;
}

/*!
 * Control creation for RegenerationDialog
 */

void RegenerationDialog::CreateControls()
{    
////@begin RegenerationDialog content construction
    // Generated by DialogBlocks, 11/06/05 21:14:43 (Personal Edition)

    RegenerationDialog* itemDialog1 = this;

    wxGridSizer* itemGridSizer2 = new wxGridSizer(1, 1, 0, 0);
    itemDialog1->SetSizer(itemGridSizer2);

    mProgress = new wxGauge( itemDialog1, ID_GAUGE, 100, wxDefaultPosition, wxSize(200, -1), wxGA_HORIZONTAL|wxGA_PROGRESSBAR|wxGA_SMOOTH );
    mProgress->SetValue(1);
    itemGridSizer2->Add(mProgress, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end RegenerationDialog content construction
}

void RegenerationDialog::UpdateProgress(int newValue)
{
    // If the progress is repeatedly updated from the context of
    // an event handler, then, on GTK, the event loop is
    // stopped and wxWidgets won't send messages to this
    // dialog box telling it to repaint.  So in order to show
    // the user changes in progress, we must explicitly call
    // Update() to repaint it.

    int oldValue = mProgress->GetValue();
    if (oldValue != newValue)
    {
        // The progress has changed.
        // Update the value and redraw it.
        mProgress->SetValue(newValue);
        mProgress->Update();
    }
}

/*!
 * Should we show tooltips?
 */

bool RegenerationDialog::ShowToolTips()
{
    return TRUE;
}

/*!
 * Get bitmap resources
 */

wxBitmap RegenerationDialog::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin RegenerationDialog bitmap retrieval
    return wxNullBitmap;
////@end RegenerationDialog bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon RegenerationDialog::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin RegenerationDialog icon retrieval
    return wxNullIcon;
////@end RegenerationDialog icon retrieval
}
